<?php
/**
 * PaymentRefundOperations
 *
 * PHP version 5
 *
 * @category Class
 * @package  daxslab\enzona\payment
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PaymentAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace daxslab\enzona\payment\model;

use \ArrayAccess;
use \daxslab\enzona\payment\ObjectSerializer;

/**
 * PaymentRefundOperations Class Doc Comment
 *
 * @category Class
 * @package  daxslab\enzona\payment
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PaymentRefundOperations implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'paymentRefundOperations';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'transaction_uuid' => 'string',
        'status_code' => 'string',
        'status_denom' => 'string',
        'transaction_created_at' => 'string',
        'transaction_updated_at' => 'string',
        'transaction_signature' => 'string',
        'amount' => '\daxslab\enzona\payment\model\PaymentRefundOperationsAmount',
        'currency' => 'string',
        'transaction_description' => 'string',
        'transaction_denom' => 'string',
        'transaction_code' => 'string',
        'terminal_id' => 'string',
        'invoice_number' => 'string',
        'username' => 'string',
        'name' => 'string',
        'lastname' => 'string',
        'avatar' => 'string',
        'items' => '\daxslab\enzona\payment\model\ItemsOperations[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'transaction_uuid' => null,
        'status_code' => null,
        'status_denom' => null,
        'transaction_created_at' => null,
        'transaction_updated_at' => null,
        'transaction_signature' => null,
        'amount' => null,
        'currency' => null,
        'transaction_description' => null,
        'transaction_denom' => null,
        'transaction_code' => null,
        'terminal_id' => null,
        'invoice_number' => null,
        'username' => null,
        'name' => null,
        'lastname' => null,
        'avatar' => null,
        'items' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'transaction_uuid' => 'transaction_uuid',
        'status_code' => 'status_code',
        'status_denom' => 'status_denom',
        'transaction_created_at' => 'transaction_created_at',
        'transaction_updated_at' => 'transaction_updated_at',
        'transaction_signature' => 'transaction_signature',
        'amount' => 'amount',
        'currency' => 'currency',
        'transaction_description' => 'transaction_description',
        'transaction_denom' => 'transaction_denom',
        'transaction_code' => 'transaction_code',
        'terminal_id' => 'terminal_id',
        'invoice_number' => 'invoice_number',
        'username' => 'username',
        'name' => 'name',
        'lastname' => 'lastname',
        'avatar' => 'avatar',
        'items' => 'items'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'transaction_uuid' => 'setTransactionUuid',
        'status_code' => 'setStatusCode',
        'status_denom' => 'setStatusDenom',
        'transaction_created_at' => 'setTransactionCreatedAt',
        'transaction_updated_at' => 'setTransactionUpdatedAt',
        'transaction_signature' => 'setTransactionSignature',
        'amount' => 'setAmount',
        'currency' => 'setCurrency',
        'transaction_description' => 'setTransactionDescription',
        'transaction_denom' => 'setTransactionDenom',
        'transaction_code' => 'setTransactionCode',
        'terminal_id' => 'setTerminalId',
        'invoice_number' => 'setInvoiceNumber',
        'username' => 'setUsername',
        'name' => 'setName',
        'lastname' => 'setLastname',
        'avatar' => 'setAvatar',
        'items' => 'setItems'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'transaction_uuid' => 'getTransactionUuid',
        'status_code' => 'getStatusCode',
        'status_denom' => 'getStatusDenom',
        'transaction_created_at' => 'getTransactionCreatedAt',
        'transaction_updated_at' => 'getTransactionUpdatedAt',
        'transaction_signature' => 'getTransactionSignature',
        'amount' => 'getAmount',
        'currency' => 'getCurrency',
        'transaction_description' => 'getTransactionDescription',
        'transaction_denom' => 'getTransactionDenom',
        'transaction_code' => 'getTransactionCode',
        'terminal_id' => 'getTerminalId',
        'invoice_number' => 'getInvoiceNumber',
        'username' => 'getUsername',
        'name' => 'getName',
        'lastname' => 'getLastname',
        'avatar' => 'getAvatar',
        'items' => 'getItems'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CURRENCY_CUP = 'CUP';
    const TRANSACTION_DENOM_DEVOLUCIN_TOTAL = 'Devoluci√≥n Total';
    const TRANSACTION_CODE__2000 = '2000';
    const TERMINAL_ID__001 = '0.01';
    const INVOICE_NUMBER__001 = '0.01';
    const USERNAME_DMILLER = 'dmiller';
    const NAME_DAVID = 'David';
    const LASTNAME_MILLER = 'Miller';
    const AVATAR__9J4_AAQ_SK_ZJ_RG_ABAQAAAQABAAD2W_BDABALDA4_M_CH_AODQ4_SERATG_CGA_GBYWGD_EJ_JR0O_OJ_M9_P_DKZ_O_DD_AS_FX_OQERXR_TC4_UG1_RV19I_Z2HN_PK1XE_X_BKE_FXL_Z2_P2W_BDARES_EHG_VGC8A_GI9J_QJH_CY2_NJ_Y2_NJ_Y2_NJ_Y2_NJ_Y2_NJ_Y2_NJ_Y2_NJ_Y2_NJ_Y2_NJ_Y2_NJ_Y2_NJ_Y2_NJ_Y2_NJ_Y2_NJ_Y2_NJ_Y2_NJ_Y2_PW_AARCA_BG_AGADASIA_AH_EB_AX_EB8_QA_GW_AAAQUBAQAAAAAAAAAAAAAAAQADBAUG_AGFX_A_AY_EAACAQIF_AG_UCBQQDAAAAAAAB_AG_MAEQQF_EI_EX_QVET_IM_FXG_QYU_IZ_K_ROF_BC_YR_HBFX_KY8_QA_FW_EA_AW_EAAAAAAAAAAAAAAAAAAAECAEA_BS_RAQEA_AG_MBAAAAAAAAAAAAAAAB_AH_ESIU_EX9O_ADAMBAAIR_AX_EA_PW_DE_CJ_XN_GSZ_GL_QV_VDMMAJ_B_AXX_J4U_IK3_C9_F9_SA_BP_YKG_AKMW_FC_RZ_RYGM_KRHA_NRQW_NYLGDN_MZMV_OZ_FD_WYLG_F_HS_AFJXQ_MCRX_U_EW_YEK_RU_DQSF260_K416_R_SR_JZ_ZMU_Y4_QAC_S33_MF_UEYEX6NAF_C_YQ_LGQCW_FRRW_QDIP7_ED6_CSS_P_UQ_V_KGGO_GJ_QN_BUQ_V_CJ_Q_RR_F_TJ_D_YD5I_L6_RS_O56_D9AY2_IKB_UXDT_TSBSE5Q7ZU_S0E_HJVU8V_HC_B_SF82QJMJ1_OT0P_VPH_HE_FD_WI2_JNHGG7_E3PY_CK_HWXU_AR2P_T_QOZ_XVTBR_T8_V6RG5V_UZ_LC_WC_JM_UCLWP7_RS_DPF8_AP_P67F_N_RPLI_RRE_KO_PV_TGIT_XH3_UEE_ED_KM_HL_NXV_KVR_MRX_P3M_W_YACTQ_Z4W_WP93_X971_KQM_JUK_RO_GG_DSN_CL_QFL9_TM_FGIC_EB49_TA9H_YA5RZ3_H_TY_J5V_F_KU_LE_VN_AB9_OR_XP_GD_BJVW_JHCG_X_PTBW_LXM_VXT_MG_EKME_YK_FRK7M9J3370V_WKIWV_ZVILK_ER_ZN1C_A1_Y5NIS_SK_VM_L_RNN_Y709GCP_RC_YS55_GFHEPC4_FJ20T022P_X6U_MEK5EF_V_KY_WJ2_MJ2_B79_KVCU_ZF_E_CP_YA9_VN1B2PUF_K0KI_S_IOP_R_DQ_UG9X81_MIWMI_QY2_AY2_JTS_NTU_PINB_CKR_RTE0B_ZAC_OL74E_R0_NXC_SL_VC_VNVP6DXJS_T_DBY_FQ4_PY8_VO_L02_VMQ_V_CL_QNBD_SRM9_G9_A_VME_DR_CSO5VP_NZ4S_CED61_GB_K_XY2C_A_XST0_N6Y_UAL_SAM_NL9AJ_K_NC_L0N4E_WOJ_QSKG_D_MB2V0RV_EZ_QY_E2_YB8_VR_ZLH_WNX_HIXAIDG_L_GW_F_RVT5_HD_D_KJ_EQDM7_UA_WV_AB_CXRHP_CCAK_CK_GB_RQ8W_HFN_AL5_V_UCK2PY_FA0_OQ_YCQSU_IZSC50RC_W8T_XF6BH_VY41_RDL_UAD2PYQ_Y27_GL_QP_U_EAKM_SJ_SZN_YDHEM_XX6_IQN_DK_HG7_AX7BNMO_GO_HJZ_RXL_C2OFM4TE4_IV7_X_PW_KGKV_WN_DFWZ_YL_B_NXQ_XRP1_P_TBU_KVI_W0R_MCD_EM_HKJ_ZS5DD_PHJLRG7_DB_VIS_S_ZV_FSJ_CO_K_HHU_KVS_PQML_O_JFRC_JY7_EG1Z_YBBK_X9_CA6_S41_D13SA_WU_VHE3_IXM_XC_K_GJ_JPA_EH_XVD_S_LM_MTA_SX_DJNX_QAIUC_XGQ8_R1_KP2OJ_E4Q_VHQ_HVT_UZ_T_WN_CK_ZW0Q_IO_HY71_GZB_ESM_EK_MB_FW_NR_EG3_U_XQ_TI_Z_SKFMAOSD_MZIWJ4_NG_KAA9_EM83_G_LY6_HXZ_Z9_I83ER4_EEX_BU_DWBLB8_A_GX_XPLG361P8_PJFT5D_EJ_AR_MTW_TS_FI9F_W4EJ_T_NB0R0WU_J_QVO_LA_PZANB3O0_F_HI_ZGSY_WLA_LY2_D_MOBTC_IO3_J45VAO2_JSH8_J_FM_USE_EHG_ASS_RD797_G4_H_QJJIU_Z2_C_SS7_ER_IX3_JYQ_BXZUD2VF2QVXYRISXW5HD3JA_TVD_JR_Q_AK_C5_LB_DG32UA0_JCX6DGOS_F2_AA4R_MF_VS_MSSE_IQ7ORFG_P8_AD_XGL_VWWOV4X_I19_I_DFMT27KD_QL2Q_PM_OWF_Q_SO_C_LSUNQ_SW_N2P_BL_VXSQI5_J37B12M_YL_S_TCN4PJWM_S8CI2D_CV_YDI_K50G_HES22JS2_IKX_A0N_Z_TVAOE_LUD_KKCWJ2_AQ_UF_KT6_WW_YC4Z_M1U_LR_HUD7B32EVWA_J3_SY6J_UZ_NHT8_JBG_CDL_B3_HU71_YY51HI_S_ZU_I3_U3_P_AV5_ST6_A_EMUC_MG_G9Z6_VXJ3_QXM_KQ_LP_Z_DF_UB_LWE_T2Q2_S_QJWYZP4Y_PBL_KOC_PCQ_S_RC_WV7D_P_WPAZ_SK3HP5IG_P5EP_A4_O1HY_KG_P_FA_JI5S_NRJ1_D_SJ_PC_A9_N_LCLMTZSAD_UPFCU8_FMH_HZRU_G_CN1VBE9T96O_PZ = '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';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCurrencyAllowableValues()
    {
        return [
            self::CURRENCY_CUP,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransactionDenomAllowableValues()
    {
        return [
            self::TRANSACTION_DENOM_DEVOLUCIN_TOTAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransactionCodeAllowableValues()
    {
        return [
            self::TRANSACTION_CODE__2000,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTerminalIdAllowableValues()
    {
        return [
            self::TERMINAL_ID__001,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInvoiceNumberAllowableValues()
    {
        return [
            self::INVOICE_NUMBER__001,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUsernameAllowableValues()
    {
        return [
            self::USERNAME_DMILLER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNameAllowableValues()
    {
        return [
            self::NAME_DAVID,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLastnameAllowableValues()
    {
        return [
            self::LASTNAME_MILLER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAvatarAllowableValues()
    {
        return [
            self::AVATAR__9J4_AAQ_SK_ZJ_RG_ABAQAAAQABAAD2W_BDABALDA4_M_CH_AODQ4_SERATG_CGA_GBYWGD_EJ_JR0O_OJ_M9_P_DKZ_O_DD_AS_FX_OQERXR_TC4_UG1_RV19I_Z2HN_PK1XE_X_BKE_FXL_Z2_P2W_BDARES_EHG_VGC8A_GI9J_QJH_CY2_NJ_Y2_NJ_Y2_NJ_Y2_NJ_Y2_NJ_Y2_NJ_Y2_NJ_Y2_NJ_Y2_NJ_Y2_NJ_Y2_NJ_Y2_NJ_Y2_NJ_Y2_NJ_Y2_NJ_Y2_NJ_Y2_PW_AARCA_BG_AGADASIA_AH_EB_AX_EB8_QA_GW_AAAQUBAQAAAAAAAAAAAAAAAQADBAUG_AGFX_A_AY_EAACAQIF_AG_UCBQQDAAAAAAAB_AG_MAEQQF_EI_EX_QVET_IM_FXG_QYU_IZ_K_ROF_BC_YR_HBFX_KY8_QA_FW_EA_AW_EAAAAAAAAAAAAAAAAAAAECAEA_BS_RAQEA_AG_MBAAAAAAAAAAAAAAAB_AH_ESIU_EX9O_ADAMBAAIR_AX_EA_PW_DE_CJ_XN_GSZ_GL_QV_VDMMAJ_B_AXX_J4U_IK3_C9_F9_SA_BP_YKG_AKMW_FC_RZ_RYGM_KRHA_NRQW_NYLGDN_MZMV_OZ_FD_WYLG_F_HS_AFJXQ_MCRX_U_EW_YEK_RU_DQSF260_K416_R_SR_JZ_ZMU_Y4_QAC_S33_MF_UEYEX6NAF_C_YQ_LGQCW_FRRW_QDIP7_ED6_CSS_P_UQ_V_KGGO_GJ_QN_BUQ_V_CJ_Q_RR_F_TJ_D_YD5I_L6_RS_O56_D9AY2_IKB_UXDT_TSBSE5Q7ZU_S0E_HJVU8V_HC_B_SF82QJMJ1_OT0P_VPH_HE_FD_WI2_JNHGG7_E3PY_CK_HWXU_AR2P_T_QOZ_XVTBR_T8_V6RG5V_UZ_LC_WC_JM_UCLWP7_RS_DPF8_AP_P67F_N_RPLI_RRE_KO_PV_TGIT_XH3_UEE_ED_KM_HL_NXV_KVR_MRX_P3M_W_YACTQ_Z4W_WP93_X971_KQM_JUK_RO_GG_DSN_CL_QFL9_TM_FGIC_EB49_TA9H_YA5RZ3_H_TY_J5V_F_KU_LE_VN_AB9_OR_XP_GD_BJVW_JHCG_X_PTBW_LXM_VXT_MG_EKME_YK_FRK7M9J3370V_WKIWV_ZVILK_ER_ZN1C_A1_Y5NIS_SK_VM_L_RNN_Y709GCP_RC_YS55_GFHEPC4_FJ20T022P_X6U_MEK5EF_V_KY_WJ2_MJ2_B79_KVCU_ZF_E_CP_YA9_VN1B2PUF_K0KI_S_IOP_R_DQ_UG9X81_MIWMI_QY2_AY2_JTS_NTU_PINB_CKR_RTE0B_ZAC_OL74E_R0_NXC_SL_VC_VNVP6DXJS_T_DBY_FQ4_PY8_VO_L02_VMQ_V_CL_QNBD_SRM9_G9_A_VME_DR_CSO5VP_NZ4S_CED61_GB_K_XY2C_A_XST0_N6Y_UAL_SAM_NL9AJ_K_NC_L0N4E_WOJ_QSKG_D_MB2V0RV_EZ_QY_E2_YB8_VR_ZLH_WNX_HIXAIDG_L_GW_F_RVT5_HD_D_KJ_EQDM7_UA_WV_AB_CXRHP_CCAK_CK_GB_RQ8W_HFN_AL5_V_UCK2PY_FA0_OQ_YCQSU_IZSC50RC_W8T_XF6BH_VY41_RDL_UAD2PYQ_Y27_GL_QP_U_EAKM_SJ_SZN_YDHEM_XX6_IQN_DK_HG7_AX7BNMO_GO_HJZ_RXL_C2OFM4TE4_IV7_X_PW_KGKV_WN_DFWZ_YL_B_NXQ_XRP1_P_TBU_KVI_W0R_MCD_EM_HKJ_ZS5DD_PHJLRG7_DB_VIS_S_ZV_FSJ_CO_K_HHU_KVS_PQML_O_JFRC_JY7_EG1Z_YBBK_X9_CA6_S41_D13SA_WU_VHE3_IXM_XC_K_GJ_JPA_EH_XVD_S_LM_MTA_SX_DJNX_QAIUC_XGQ8_R1_KP2OJ_E4Q_VHQ_HVT_UZ_T_WN_CK_ZW0Q_IO_HY71_GZB_ESM_EK_MB_FW_NR_EG3_U_XQ_TI_Z_SKFMAOSD_MZIWJ4_NG_KAA9_EM83_G_LY6_HXZ_Z9_I83ER4_EEX_BU_DWBLB8_A_GX_XPLG361P8_PJFT5D_EJ_AR_MTW_TS_FI9F_W4EJ_T_NB0R0WU_J_QVO_LA_PZANB3O0_F_HI_ZGSY_WLA_LY2_D_MOBTC_IO3_J45VAO2_JSH8_J_FM_USE_EHG_ASS_RD797_G4_H_QJJIU_Z2_C_SS7_ER_IX3_JYQ_BXZUD2VF2QVXYRISXW5HD3JA_TVD_JR_Q_AK_C5_LB_DG32UA0_JCX6DGOS_F2_AA4R_MF_VS_MSSE_IQ7ORFG_P8_AD_XGL_VWWOV4X_I19_I_DFMT27KD_QL2Q_PM_OWF_Q_SO_C_LSUNQ_SW_N2P_BL_VXSQI5_J37B12M_YL_S_TCN4PJWM_S8CI2D_CV_YDI_K50G_HES22JS2_IKX_A0N_Z_TVAOE_LUD_KKCWJ2_AQ_UF_KT6_WW_YC4Z_M1U_LR_HUD7B32EVWA_J3_SY6J_UZ_NHT8_JBG_CDL_B3_HU71_YY51HI_S_ZU_I3_U3_P_AV5_ST6_A_EMUC_MG_G9Z6_VXJ3_QXM_KQ_LP_Z_DF_UB_LWE_T2Q2_S_QJWYZP4Y_PBL_KOC_PCQ_S_RC_WV7D_P_WPAZ_SK3HP5IG_P5EP_A4_O1HY_KG_P_FA_JI5S_NRJ1_D_SJ_PC_A9_N_LCLMTZSAD_UPFCU8_FMH_HZRU_G_CN1VBE9T96O_PZ,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['transaction_uuid'] = isset($data['transaction_uuid']) ? $data['transaction_uuid'] : null;
        $this->container['status_code'] = isset($data['status_code']) ? $data['status_code'] : null;
        $this->container['status_denom'] = isset($data['status_denom']) ? $data['status_denom'] : null;
        $this->container['transaction_created_at'] = isset($data['transaction_created_at']) ? $data['transaction_created_at'] : null;
        $this->container['transaction_updated_at'] = isset($data['transaction_updated_at']) ? $data['transaction_updated_at'] : null;
        $this->container['transaction_signature'] = isset($data['transaction_signature']) ? $data['transaction_signature'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['transaction_description'] = isset($data['transaction_description']) ? $data['transaction_description'] : null;
        $this->container['transaction_denom'] = isset($data['transaction_denom']) ? $data['transaction_denom'] : null;
        $this->container['transaction_code'] = isset($data['transaction_code']) ? $data['transaction_code'] : null;
        $this->container['terminal_id'] = isset($data['terminal_id']) ? $data['terminal_id'] : null;
        $this->container['invoice_number'] = isset($data['invoice_number']) ? $data['invoice_number'] : null;
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['lastname'] = isset($data['lastname']) ? $data['lastname'] : null;
        $this->container['avatar'] = isset($data['avatar']) ? $data['avatar'] : null;
        $this->container['items'] = isset($data['items']) ? $data['items'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

//        $allowedValues = $this->getCurrencyAllowableValues();
//        if (!is_null($this->container['currency']) && !in_array($this->container['currency'], $allowedValues, true)) {
//            $invalidProperties[] = sprintf(
//                "invalid value for 'currency', must be one of '%s'",
//                implode("', '", $allowedValues)
//            );
//        }
//
//        $allowedValues = $this->getTransactionDenomAllowableValues();
//        if (!is_null($this->container['transaction_denom']) && !in_array($this->container['transaction_denom'], $allowedValues, true)) {
//            $invalidProperties[] = sprintf(
//                "invalid value for 'transaction_denom', must be one of '%s'",
//                implode("', '", $allowedValues)
//            );
//        }
//
//        $allowedValues = $this->getTransactionCodeAllowableValues();
//        if (!is_null($this->container['transaction_code']) && !in_array($this->container['transaction_code'], $allowedValues, true)) {
//            $invalidProperties[] = sprintf(
//                "invalid value for 'transaction_code', must be one of '%s'",
//                implode("', '", $allowedValues)
//            );
//        }
//
//        $allowedValues = $this->getTerminalIdAllowableValues();
//        if (!is_null($this->container['terminal_id']) && !in_array($this->container['terminal_id'], $allowedValues, true)) {
//            $invalidProperties[] = sprintf(
//                "invalid value for 'terminal_id', must be one of '%s'",
//                implode("', '", $allowedValues)
//            );
//        }
//
//        $allowedValues = $this->getInvoiceNumberAllowableValues();
//        if (!is_null($this->container['invoice_number']) && !in_array($this->container['invoice_number'], $allowedValues, true)) {
//            $invalidProperties[] = sprintf(
//                "invalid value for 'invoice_number', must be one of '%s'",
//                implode("', '", $allowedValues)
//            );
//        }
//
//        $allowedValues = $this->getUsernameAllowableValues();
//        if (!is_null($this->container['username']) && !in_array($this->container['username'], $allowedValues, true)) {
//            $invalidProperties[] = sprintf(
//                "invalid value for 'username', must be one of '%s'",
//                implode("', '", $allowedValues)
//            );
//        }
//
//        $allowedValues = $this->getNameAllowableValues();
//        if (!is_null($this->container['name']) && !in_array($this->container['name'], $allowedValues, true)) {
//            $invalidProperties[] = sprintf(
//                "invalid value for 'name', must be one of '%s'",
//                implode("', '", $allowedValues)
//            );
//        }
//
//        $allowedValues = $this->getLastnameAllowableValues();
//        if (!is_null($this->container['lastname']) && !in_array($this->container['lastname'], $allowedValues, true)) {
//            $invalidProperties[] = sprintf(
//                "invalid value for 'lastname', must be one of '%s'",
//                implode("', '", $allowedValues)
//            );
//        }
//
//        $allowedValues = $this->getAvatarAllowableValues();
//        if (!is_null($this->container['avatar']) && !in_array($this->container['avatar'], $allowedValues, true)) {
//            $invalidProperties[] = sprintf(
//                "invalid value for 'avatar', must be one of '%s'",
//                implode("', '", $allowedValues)
//            );
//        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets transaction_uuid
     *
     * @return string
     */
    public function getTransactionUuid()
    {
        return $this->container['transaction_uuid'];
    }

    /**
     * Sets transaction_uuid
     *
     * @param string $transaction_uuid transaction_uuid
     *
     * @return $this
     */
    public function setTransactionUuid($transaction_uuid)
    {
        $this->container['transaction_uuid'] = $transaction_uuid;

        return $this;
    }

    /**
     * Gets status_code
     *
     * @return string
     */
    public function getStatusCode()
    {
        return $this->container['status_code'];
    }

    /**
     * Sets status_code
     *
     * @param string $status_code status_code
     *
     * @return $this
     */
    public function setStatusCode($status_code)
    {
        $this->container['status_code'] = $status_code;

        return $this;
    }

    /**
     * Gets status_denom
     *
     * @return string
     */
    public function getStatusDenom()
    {
        return $this->container['status_denom'];
    }

    /**
     * Sets status_denom
     *
     * @param string $status_denom status_denom
     *
     * @return $this
     */
    public function setStatusDenom($status_denom)
    {
        $this->container['status_denom'] = $status_denom;

        return $this;
    }

    /**
     * Gets transaction_created_at
     *
     * @return string
     */
    public function getTransactionCreatedAt()
    {
        return $this->container['transaction_created_at'];
    }

    /**
     * Sets transaction_created_at
     *
     * @param string $transaction_created_at transaction_created_at
     *
     * @return $this
     */
    public function setTransactionCreatedAt($transaction_created_at)
    {
        $this->container['transaction_created_at'] = $transaction_created_at;

        return $this;
    }

    /**
     * Gets transaction_updated_at
     *
     * @return string
     */
    public function getTransactionUpdatedAt()
    {
        return $this->container['transaction_updated_at'];
    }

    /**
     * Sets transaction_updated_at
     *
     * @param string $transaction_updated_at transaction_updated_at
     *
     * @return $this
     */
    public function setTransactionUpdatedAt($transaction_updated_at)
    {
        $this->container['transaction_updated_at'] = $transaction_updated_at;

        return $this;
    }

    /**
     * Gets transaction_signature
     *
     * @return string
     */
    public function getTransactionSignature()
    {
        return $this->container['transaction_signature'];
    }

    /**
     * Sets transaction_signature
     *
     * @param string $transaction_signature transaction_signature
     *
     * @return $this
     */
    public function setTransactionSignature($transaction_signature)
    {
        $this->container['transaction_signature'] = $transaction_signature;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return \daxslab\enzona\payment\model\PaymentRefundOperationsAmount
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param \daxslab\enzona\payment\model\PaymentRefundOperationsAmount $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $allowedValues = $this->getCurrencyAllowableValues();
//        if (!is_null($currency) && !in_array($currency, $allowedValues, true)) {
//            throw new \InvalidArgumentException(
//                sprintf(
//                    "Invalid value for 'currency', must be one of '%s'",
//                    implode("', '", $allowedValues)
//                )
//            );
//        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets transaction_description
     *
     * @return string
     */
    public function getTransactionDescription()
    {
        return $this->container['transaction_description'];
    }

    /**
     * Sets transaction_description
     *
     * @param string $transaction_description transaction_description
     *
     * @return $this
     */
    public function setTransactionDescription($transaction_description)
    {
        $this->container['transaction_description'] = $transaction_description;

        return $this;
    }

    /**
     * Gets transaction_denom
     *
     * @return string
     */
    public function getTransactionDenom()
    {
        return $this->container['transaction_denom'];
    }

    /**
     * Sets transaction_denom
     *
     * @param string $transaction_denom transaction_denom
     *
     * @return $this
     */
    public function setTransactionDenom($transaction_denom)
    {
        $allowedValues = $this->getTransactionDenomAllowableValues();
//        if (!is_null($transaction_denom) && !in_array($transaction_denom, $allowedValues, true)) {
//            throw new \InvalidArgumentException(
//                sprintf(
//                    "Invalid value for 'transaction_denom', must be one of '%s'",
//                    implode("', '", $allowedValues)
//                )
//            );
//        }
        $this->container['transaction_denom'] = $transaction_denom;

        return $this;
    }

    /**
     * Gets transaction_code
     *
     * @return string
     */
    public function getTransactionCode()
    {
        return $this->container['transaction_code'];
    }

    /**
     * Sets transaction_code
     *
     * @param string $transaction_code transaction_code
     *
     * @return $this
     */
    public function setTransactionCode($transaction_code)
    {
        $allowedValues = $this->getTransactionCodeAllowableValues();
//        if (!is_null($transaction_code) && !in_array($transaction_code, $allowedValues, true)) {
//            throw new \InvalidArgumentException(
//                sprintf(
//                    "Invalid value for 'transaction_code', must be one of '%s'",
//                    implode("', '", $allowedValues)
//                )
//            );
//        }
        $this->container['transaction_code'] = $transaction_code;

        return $this;
    }

    /**
     * Gets terminal_id
     *
     * @return string
     */
    public function getTerminalId()
    {
        return $this->container['terminal_id'];
    }

    /**
     * Sets terminal_id
     *
     * @param string $terminal_id terminal_id
     *
     * @return $this
     */
    public function setTerminalId($terminal_id)
    {
        $allowedValues = $this->getTerminalIdAllowableValues();
//        if (!is_null($terminal_id) && !in_array($terminal_id, $allowedValues, true)) {
//            throw new \InvalidArgumentException(
//                sprintf(
//                    "Invalid value for 'terminal_id', must be one of '%s'",
//                    implode("', '", $allowedValues)
//                )
//            );
//        }
        $this->container['terminal_id'] = $terminal_id;

        return $this;
    }

    /**
     * Gets invoice_number
     *
     * @return string
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     *
     * @param string $invoice_number invoice_number
     *
     * @return $this
     */
    public function setInvoiceNumber($invoice_number)
    {
        $allowedValues = $this->getInvoiceNumberAllowableValues();
//        if (!is_null($invoice_number) && !in_array($invoice_number, $allowedValues, true)) {
//            throw new \InvalidArgumentException(
//                sprintf(
//                    "Invalid value for 'invoice_number', must be one of '%s'",
//                    implode("', '", $allowedValues)
//                )
//            );
//        }
        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username username
     *
     * @return $this
     */
    public function setUsername($username)
    {
        $allowedValues = $this->getUsernameAllowableValues();
//        if (!is_null($username) && !in_array($username, $allowedValues, true)) {
//            throw new \InvalidArgumentException(
//                sprintf(
//                    "Invalid value for 'username', must be one of '%s'",
//                    implode("', '", $allowedValues)
//                )
//            );
//        }
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $allowedValues = $this->getNameAllowableValues();
//        if (!is_null($name) && !in_array($name, $allowedValues, true)) {
//            throw new \InvalidArgumentException(
//                sprintf(
//                    "Invalid value for 'name', must be one of '%s'",
//                    implode("', '", $allowedValues)
//                )
//            );
//        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets lastname
     *
     * @return string
     */
    public function getLastname()
    {
        return $this->container['lastname'];
    }

    /**
     * Sets lastname
     *
     * @param string $lastname lastname
     *
     * @return $this
     */
    public function setLastname($lastname)
    {
        $allowedValues = $this->getLastnameAllowableValues();
//        if (!is_null($lastname) && !in_array($lastname, $allowedValues, true)) {
//            throw new \InvalidArgumentException(
//                sprintf(
//                    "Invalid value for 'lastname', must be one of '%s'",
//                    implode("', '", $allowedValues)
//                )
//            );
//        }
        $this->container['lastname'] = $lastname;

        return $this;
    }

    /**
     * Gets avatar
     *
     * @return string
     */
    public function getAvatar()
    {
        return $this->container['avatar'];
    }

    /**
     * Sets avatar
     *
     * @param string $avatar avatar
     *
     * @return $this
     */
    public function setAvatar($avatar)
    {
        $allowedValues = $this->getAvatarAllowableValues();
//        if (!is_null($avatar) && !in_array($avatar, $allowedValues, true)) {
//            throw new \InvalidArgumentException(
//                sprintf(
//                    "Invalid value for 'avatar', must be one of '%s'",
//                    implode("', '", $allowedValues)
//                )
//            );
//        }
        $this->container['avatar'] = $avatar;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \daxslab\enzona\payment\model\ItemsOperations[]
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \daxslab\enzona\payment\model\ItemsOperations[] $items items
     *
     * @return $this
     */
    public function setItems($items)
    {
        $this->container['items'] = $items;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


