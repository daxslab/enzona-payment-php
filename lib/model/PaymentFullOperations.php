<?php
/**
 * PaymentFullOperations
 *
 * PHP version 5
 *
 * @category Class
 * @package  daxslab\enzona\payment
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PaymentAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace daxslab\enzona\payment\model;

use \ArrayAccess;
use \daxslab\enzona\payment\ObjectSerializer;

/**
 * PaymentFullOperations Class Doc Comment
 *
 * @category Class
 * @package  daxslab\enzona\payment
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PaymentFullOperations implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'paymentFullOperations';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'transaction_uuid' => 'string',
        'currency' => 'string',
        'created_at' => '\DateTime',
        'update_at' => '\DateTime',
        'status_code' => 'int',
        'status_denom' => 'string',
        'description' => 'string',
        'invoice_number' => 'int',
        'merchant_op_id' => 'string',
        'terminal_id' => 'int',
        'amount' => '\daxslab\enzona\payment\model\AmountOperations',
        'items' => '\daxslab\enzona\payment\model\ItemsOperations[]',
        'links' => '\daxslab\enzona\payment\model\LinksSchema[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'transaction_uuid' => null,
        'currency' => null,
        'created_at' => 'date-time',
        'update_at' => 'date-time',
        'status_code' => null,
        'status_denom' => null,
        'description' => null,
        'invoice_number' => null,
        'merchant_op_id' => null,
        'terminal_id' => null,
        'amount' => null,
        'items' => null,
        'links' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'transaction_uuid' => 'transaction_uuid',
        'currency' => 'currency',
        'created_at' => 'created_at',
        'update_at' => 'update_at',
        'status_code' => 'status_code',
        'status_denom' => 'status_denom',
        'description' => 'description',
        'invoice_number' => 'invoice_number',
        'merchant_op_id' => 'merchant_op_id',
        'terminal_id' => 'terminal_id',
        'amount' => 'amount',
        'items' => 'items',
        'links' => 'links'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'transaction_uuid' => 'setTransactionUuid',
        'currency' => 'setCurrency',
        'created_at' => 'setCreatedAt',
        'update_at' => 'setUpdateAt',
        'status_code' => 'setStatusCode',
        'status_denom' => 'setStatusDenom',
        'description' => 'setDescription',
        'invoice_number' => 'setInvoiceNumber',
        'merchant_op_id' => 'setMerchantOpId',
        'terminal_id' => 'setTerminalId',
        'amount' => 'setAmount',
        'items' => 'setItems',
        'links' => 'setLinks'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'transaction_uuid' => 'getTransactionUuid',
        'currency' => 'getCurrency',
        'created_at' => 'getCreatedAt',
        'update_at' => 'getUpdateAt',
        'status_code' => 'getStatusCode',
        'status_denom' => 'getStatusDenom',
        'description' => 'getDescription',
        'invoice_number' => 'getInvoiceNumber',
        'merchant_op_id' => 'getMerchantOpId',
        'terminal_id' => 'getTerminalId',
        'amount' => 'getAmount',
        'items' => 'getItems',
        'links' => 'getLinks'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TRANSACTION_UUID_F89C79C8DFBD43939CDC43CF47B1EE47 = 'f89c79c8dfbd43939cdc43cf47b1ee47';
    const CURRENCY_CUP = 'CUP';
    const CURRENCY_CUC = 'CUC';
    const STATUS_DENOM_PENDIENTE = 'Pendiente';
    const DESCRIPTION_PAYMENT_DESCRIPTION = 'Payment description';
    const MERCHANT_OP_ID__1135 = '1135';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransactionUuidAllowableValues()
    {
        return [
            self::TRANSACTION_UUID_F89C79C8DFBD43939CDC43CF47B1EE47,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCurrencyAllowableValues()
    {
        return [
            self::CURRENCY_CUP,
            self::CURRENCY_CUC,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusDenomAllowableValues()
    {
        return [
            self::STATUS_DENOM_PENDIENTE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDescriptionAllowableValues()
    {
        return [
            self::DESCRIPTION_PAYMENT_DESCRIPTION,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMerchantOpIdAllowableValues()
    {
        return [
            self::MERCHANT_OP_ID__1135,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['transaction_uuid'] = isset($data['transaction_uuid']) ? $data['transaction_uuid'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['update_at'] = isset($data['update_at']) ? $data['update_at'] : null;
        $this->container['status_code'] = isset($data['status_code']) ? $data['status_code'] : null;
        $this->container['status_denom'] = isset($data['status_denom']) ? $data['status_denom'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['invoice_number'] = isset($data['invoice_number']) ? $data['invoice_number'] : null;
        $this->container['merchant_op_id'] = isset($data['merchant_op_id']) ? $data['merchant_op_id'] : null;
        $this->container['terminal_id'] = isset($data['terminal_id']) ? $data['terminal_id'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['items'] = isset($data['items']) ? $data['items'] : null;
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

//        $allowedValues = $this->getTransactionUuidAllowableValues();
//        if (!is_null($this->container['transaction_uuid']) && !in_array($this->container['transaction_uuid'], $allowedValues, true)) {
//            $invalidProperties[] = sprintf(
//                "invalid value for 'transaction_uuid', must be one of '%s'",
//                implode("', '", $allowedValues)
//            );
//        }
//
//        $allowedValues = $this->getCurrencyAllowableValues();
//        if (!is_null($this->container['currency']) && !in_array($this->container['currency'], $allowedValues, true)) {
//            $invalidProperties[] = sprintf(
//                "invalid value for 'currency', must be one of '%s'",
//                implode("', '", $allowedValues)
//            );
//        }
//
//        $allowedValues = $this->getStatusDenomAllowableValues();
//        if (!is_null($this->container['status_denom']) && !in_array($this->container['status_denom'], $allowedValues, true)) {
//            $invalidProperties[] = sprintf(
//                "invalid value for 'status_denom', must be one of '%s'",
//                implode("', '", $allowedValues)
//            );
//        }
//
//        $allowedValues = $this->getDescriptionAllowableValues();
//        if (!is_null($this->container['description']) && !in_array($this->container['description'], $allowedValues, true)) {
//            $invalidProperties[] = sprintf(
//                "invalid value for 'description', must be one of '%s'",
//                implode("', '", $allowedValues)
//            );
//        }
//
//        $allowedValues = $this->getMerchantOpIdAllowableValues();
//        if (!is_null($this->container['merchant_op_id']) && !in_array($this->container['merchant_op_id'], $allowedValues, true)) {
//            $invalidProperties[] = sprintf(
//                "invalid value for 'merchant_op_id', must be one of '%s'",
//                implode("', '", $allowedValues)
//            );
//        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets transaction_uuid
     *
     * @return string
     */
    public function getTransactionUuid()
    {
        return $this->container['transaction_uuid'];
    }

    /**
     * Sets transaction_uuid
     *
     * @param string $transaction_uuid transaction_uuid
     *
     * @return $this
     */
    public function setTransactionUuid($transaction_uuid)
    {
        $allowedValues = $this->getTransactionUuidAllowableValues();
//        if (!is_null($transaction_uuid) && !in_array($transaction_uuid, $allowedValues, true)) {
//            throw new \InvalidArgumentException(
//                sprintf(
//                    "Invalid value for 'transaction_uuid', must be one of '%s'",
//                    implode("', '", $allowedValues)
//                )
//            );
//        }
        $this->container['transaction_uuid'] = $transaction_uuid;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $allowedValues = $this->getCurrencyAllowableValues();
//        if (!is_null($currency) && !in_array($currency, $allowedValues, true)) {
//            throw new \InvalidArgumentException(
//                sprintf(
//                    "Invalid value for 'currency', must be one of '%s'",
//                    implode("', '", $allowedValues)
//                )
//            );
//        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets update_at
     *
     * @return \DateTime
     */
    public function getUpdateAt()
    {
        return $this->container['update_at'];
    }

    /**
     * Sets update_at
     *
     * @param \DateTime $update_at update_at
     *
     * @return $this
     */
    public function setUpdateAt($update_at)
    {
        $this->container['update_at'] = $update_at;

        return $this;
    }

    /**
     * Gets status_code
     *
     * @return int
     */
    public function getStatusCode()
    {
        return $this->container['status_code'];
    }

    /**
     * Sets status_code
     *
     * @param int $status_code status_code
     *
     * @return $this
     */
    public function setStatusCode($status_code)
    {
        $this->container['status_code'] = $status_code;

        return $this;
    }

    /**
     * Gets status_denom
     *
     * @return string
     */
    public function getStatusDenom()
    {
        return $this->container['status_denom'];
    }

    /**
     * Sets status_denom
     *
     * @param string $status_denom status_denom
     *
     * @return $this
     */
    public function setStatusDenom($status_denom)
    {
        $allowedValues = $this->getStatusDenomAllowableValues();
//        if (!is_null($status_denom) && !in_array($status_denom, $allowedValues, true)) {
//            throw new \InvalidArgumentException(
//                sprintf(
//                    "Invalid value for 'status_denom', must be one of '%s'",
//                    implode("', '", $allowedValues)
//                )
//            );
//        }
        $this->container['status_denom'] = $status_denom;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $allowedValues = $this->getDescriptionAllowableValues();
//        if (!is_null($description) && !in_array($description, $allowedValues, true)) {
//            throw new \InvalidArgumentException(
//                sprintf(
//                    "Invalid value for 'description', must be one of '%s'",
//                    implode("', '", $allowedValues)
//                )
//            );
//        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets invoice_number
     *
     * @return int
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     *
     * @param int $invoice_number invoice_number
     *
     * @return $this
     */
    public function setInvoiceNumber($invoice_number)
    {
        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets merchant_op_id
     *
     * @return string
     */
    public function getMerchantOpId()
    {
        return $this->container['merchant_op_id'];
    }

    /**
     * Sets merchant_op_id
     *
     * @param string $merchant_op_id merchant_op_id
     *
     * @return $this
     */
    public function setMerchantOpId($merchant_op_id)
    {
        $allowedValues = $this->getMerchantOpIdAllowableValues();
//        if (!is_null($merchant_op_id) && !in_array($merchant_op_id, $allowedValues, true)) {
//            throw new \InvalidArgumentException(
//                sprintf(
//                    "Invalid value for 'merchant_op_id', must be one of '%s'",
//                    implode("', '", $allowedValues)
//                )
//            );
//        }
        $this->container['merchant_op_id'] = $merchant_op_id;

        return $this;
    }

    /**
     * Gets terminal_id
     *
     * @return int
     */
    public function getTerminalId()
    {
        return $this->container['terminal_id'];
    }

    /**
     * Sets terminal_id
     *
     * @param int $terminal_id terminal_id
     *
     * @return $this
     */
    public function setTerminalId($terminal_id)
    {
        $this->container['terminal_id'] = $terminal_id;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return \daxslab\enzona\payment\model\AmountOperations
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param \daxslab\enzona\payment\model\AmountOperations $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \daxslab\enzona\payment\model\ItemsOperations[]
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \daxslab\enzona\payment\model\ItemsOperations[] $items items
     *
     * @return $this
     */
    public function setItems($items)
    {
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets links
     *
     * @return \daxslab\enzona\payment\model\LinksSchema[]
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \daxslab\enzona\payment\model\LinksSchema[] $links links
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


