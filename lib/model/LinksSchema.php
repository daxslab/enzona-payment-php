<?php
/**
 * LinksSchema
 *
 * PHP version 5
 *
 * @category Class
 * @package  daxslab\enzona\payment
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PaymentAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace daxslab\enzona\payment\model;

use \ArrayAccess;
use \daxslab\enzona\payment\ObjectSerializer;

/**
 * LinksSchema Class Doc Comment
 *
 * @category Class
 * @package  daxslab\enzona\payment
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LinksSchema implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'linksSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'rel' => 'string',
        'method' => 'string',
        'href' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'rel' => null,
        'method' => null,
        'href' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'rel' => 'rel',
        'method' => 'method',
        'href' => 'href'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'rel' => 'setRel',
        'method' => 'setMethod',
        'href' => 'setHref'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'rel' => 'getRel',
        'method' => 'getMethod',
        'href' => 'getHref'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const REL_CONFIRM = 'confirm';
    const METHOD_REDIRECT = 'REDIRECT';
    const HREF_HTTPSENZONAXETIDCUCHECKOUT1940841EC89D4F32AEF06C813825920BLOGIN = 'https://enzona.xetid.cu/checkout/1940841ec89d4f32aef06c813825920b/login';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRelAllowableValues()
    {
        return [
            self::REL_CONFIRM,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMethodAllowableValues()
    {
        return [
            self::METHOD_REDIRECT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHrefAllowableValues()
    {
        return [
            self::HREF_HTTPSENZONAXETIDCUCHECKOUT1940841EC89D4F32AEF06C813825920BLOGIN,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['rel'] = isset($data['rel']) ? $data['rel'] : null;
        $this->container['method'] = isset($data['method']) ? $data['method'] : null;
        $this->container['href'] = isset($data['href']) ? $data['href'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

//        $allowedValues = $this->getRelAllowableValues();
//        if (!is_null($this->container['rel']) && !in_array($this->container['rel'], $allowedValues, true)) {
//            $invalidProperties[] = sprintf(
//                "invalid value for 'rel', must be one of '%s'",
//                implode("', '", $allowedValues)
//            );
//        }
//
//        $allowedValues = $this->getMethodAllowableValues();
//        if (!is_null($this->container['method']) && !in_array($this->container['method'], $allowedValues, true)) {
//            $invalidProperties[] = sprintf(
//                "invalid value for 'method', must be one of '%s'",
//                implode("', '", $allowedValues)
//            );
//        }
//
//        $allowedValues = $this->getHrefAllowableValues();
//        if (!is_null($this->container['href']) && !in_array($this->container['href'], $allowedValues, true)) {
//            $invalidProperties[] = sprintf(
//                "invalid value for 'href', must be one of '%s'",
//                implode("', '", $allowedValues)
//            );
//        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets rel
     *
     * @return string
     */
    public function getRel()
    {
        return $this->container['rel'];
    }

    /**
     * Sets rel
     *
     * @param string $rel rel
     *
     * @return $this
     */
    public function setRel($rel)
    {
        $allowedValues = $this->getRelAllowableValues();
//        if (!is_null($rel) && !in_array($rel, $allowedValues, true)) {
//            throw new \InvalidArgumentException(
//                sprintf(
//                    "Invalid value for 'rel', must be one of '%s'",
//                    implode("', '", $allowedValues)
//                )
//            );
//        }
        $this->container['rel'] = $rel;

        return $this;
    }

    /**
     * Gets method
     *
     * @return string
     */
    public function getMethod()
    {
        return $this->container['method'];
    }

    /**
     * Sets method
     *
     * @param string $method method
     *
     * @return $this
     */
    public function setMethod($method)
    {
        $allowedValues = $this->getMethodAllowableValues();
//        if (!is_null($method) && !in_array($method, $allowedValues, true)) {
//            throw new \InvalidArgumentException(
//                sprintf(
//                    "Invalid value for 'method', must be one of '%s'",
//                    implode("', '", $allowedValues)
//                )
//            );
//        }
        $this->container['method'] = $method;

        return $this;
    }

    /**
     * Gets href
     *
     * @return string
     */
    public function getHref()
    {
        return $this->container['href'];
    }

    /**
     * Sets href
     *
     * @param string $href href
     *
     * @return $this
     */
    public function setHref($href)
    {
        $allowedValues = $this->getHrefAllowableValues();
//        if (!is_null($href) && !in_array($href, $allowedValues, true)) {
//            throw new \InvalidArgumentException(
//                sprintf(
//                    "Invalid value for 'href', must be one of '%s'",
//                    implode("', '", $allowedValues)
//                )
//            );
//        }
        $this->container['href'] = $href;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


